// Generated by ReScript, PLEASE EDIT WITH CARE

import ReactReconciler from "react-reconciler";
import * as JsxRuntime from "react/jsx-runtime";

console.log("Hey :)");

var Reconcilier = {};

var reconcilier = ReactReconciler({
      getRootHostContext: (function () {
          return {
                  isInsideText: false
                };
        }),
      appendChildToContainer: (function (param, param$1) {
          console.log("appendChildToContainer.");
        }),
      appendInitialChild: (function (param, param$1) {
          console.log("appendInitialChild");
        }),
      createInstance: (function (name, param, param$1) {
          console.log("createInstance", name);
        }),
      createTextInstance: (function (param, param$1) {
          console.log("createTextInstance");
        }),
      prepareUpdate: (function (param, __, param$1, param$2) {
          console.log("prepareUpdate");
        }),
      commitUpdate: (function (param, param$1) {
          console.log("commitUpdate");
        }),
      commitTextUpdate: (function (param, param$1, param$2) {
          console.log("commitTextUpdate");
        }),
      appendChild: (function (param, param$1) {
          console.log("appendChild");
        }),
      getChildHostContext: (function () {
          
        }),
      shouldSetTextContent: (function () {
          
        }),
      prepareForCommit: (function () {
          
        }),
      preparePortalMount: (function () {
          
        }),
      clearContainer: (function () {
          
        }),
      resetAfterCommit: (function () {
          
        }),
      resetTextContent: (function () {
          
        }),
      hideTextInstance: (function () {
          
        }),
      unhideTextInstance: (function () {
          
        }),
      getPublicInstance: (function () {
          
        }),
      hideInstance: (function (param) {
          
        }),
      unhideInstance: (function () {
          
        }),
      insertBefore: (function (param, param$1, param$2) {
          
        }),
      finalizeInitialChildren: (function () {
          
        }),
      getCurrentEventPriority: (function () {
          
        }),
      beforeActiveInstanceBlur: (function () {
          
        }),
      afterActiveInstanceBlur: (function () {
          
        }),
      detachDeletedInstance: (function () {
          
        }),
      getInstanceFromNode: (function () {
          
        }),
      prepareScopeUpdate: (function () {
          
        }),
      getInstanceFromScope: (function () {
          
        }),
      insertInContainerBefore: (function () {
          
        }),
      removeChildFromContainer: (function () {
          
        }),
      removeChild: (function (param) {
          
        }),
      isPrimaryRenderer: true,
      supportsMutation: true,
      supportsPersistence: false,
      supportsHydration: false,
      scheduleTimeout: (function (prim0, prim1) {
          return setTimeout(prim0, prim1);
        }),
      cancelTimeout: (function (prim) {
          clearTimeout(prim);
        }),
      noTimeout: -1
    });

function render(app, root) {
  var container = reconcilier.createContainer(root, 0, null, false, null, "id", (function () {
          return null;
        }), null);
  reconcilier.updateContainer(app, container, null, (function () {
          return null;
        }));
}

render(JsxRuntime.jsx("div", {
          qlqcoisa: "test..."
        }), {
      mount: (function (prim) {
          
        })
    });

export {
  Reconcilier ,
  reconcilier ,
  render ,
}
/*  Not a pure module */
